{"version":3,"sources":["components/Buscador.js","components/Imagen.js","components/Paginacion.js","components/Resultado.js","App.js","serviceWorker.js","index.js"],"names":["Buscador","props","textInput","useRef","onSubmit","e","preventDefault","datosBusqueda","current","value","className","ref","placeholder","type","Imagen","imagen","largeImageURL","likes","previewURL","tags","views","src","alt","href","target","rel","Paginacion","onClick","paginaAnterior","paginaSiguiente","Resultado","Fragment","imagenes","map","key","id","App","useState","termino","setTermino","setImagenes","pagina","setPagina","fetchApi","palabraBusqueda","url","fetch","then","respuesta","json","resultado","res","hits","scroll","document","querySelector","scrollIntoView","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"qJA2BeA,EAzBE,SAACC,GAEd,IAAIC,EAAYC,mBAOhB,OACA,0BAAMC,SANU,SAAAC,GACZA,EAAEC,iBACFL,EAAMM,cAAcL,EAAUM,QAAQC,SAKtC,yBAAKC,UAAU,OACX,yBAAKA,UAAU,uBACX,2BAAOC,IAAKT,EAAWU,YAAY,oBAAoBF,UAAU,kCAErE,yBAAKA,UAAU,uBACX,2BAAOG,KAAK,SAASH,UAAU,kCAAkCD,MAAM,eCQxEK,G,KAxBA,SAACb,GAAW,IAAD,EAEkCA,EAAMc,OAAvDC,EAFe,EAEfA,cAAeC,EAFA,EAEAA,MAAOC,EAFP,EAEOA,WAAYC,EAFnB,EAEmBA,KAAMC,EAFzB,EAEyBA,MAEjD,OACE,yBAAKV,UAAU,0CACX,yBAAKA,UAAU,QACX,yBAAKW,IAAKH,EAAYI,IAAKH,EAAMT,UAAU,sBAC3C,yBAAKA,UAAU,aACX,uBAAGA,UAAU,aACRO,EADL,aAGA,uBAAGP,UAAU,aACRU,EADL,gBAGA,uBAAGG,KAAMP,EAAeQ,OAAO,SAASC,IAAI,sBAAsBf,UAAU,6BAA5E,mBCFDgB,EAbI,SAACzB,GAChB,OACI,yBAAKS,UAAU,QACf,4BAAQG,KAAK,SAASH,UAAU,oBAAoBiB,QAAS1B,EAAM2B,gBAAnE,mBAGA,4BAAQf,KAAK,SAASH,UAAU,oBAAoBiB,QAAS1B,EAAM4B,iBAAnE,sBCwBOC,EA7BG,SAAC7B,GAqBjB,OACI,kBAAC,IAAM8B,SAAP,KAnBe9B,EAAM+B,SAInB,kBAAC,IAAMD,SAAP,KACI,yBAAKrB,UAAU,kBACVT,EAAM+B,SAASA,SAASC,KAAI,SAAAlB,GAAM,OACnC,kBAAC,EAAD,CAAQA,OAAQA,EAAQmB,IAAKnB,EAAOoB,SAExC,kBAAC,EAAD,CACIP,eAAgB3B,EAAM2B,eACtBC,gBAAiB5B,EAAM4B,mBAVd,OC6DVO,MAhEf,WAAe,MAGiBC,qBAHjB,mBAGNC,EAHM,KAGGC,EAHH,OAImBF,qBAJnB,mBAINL,EAJM,KAIIQ,EAJJ,OAKeH,mBAAS,GALxB,mBAKNI,EALM,KAKEC,EALF,KAQPC,EAAW,SAACC,GAChB,IAAMC,EAAG,2EAAuED,EAAvE,6BAA2GH,GACpHK,MAAMD,GAAKE,MAAK,SAAAC,GAAS,OAAIA,EAAUC,UACtCF,MAAK,SAAAG,GACJ,IAAIC,EAAMD,EAAUE,KAEpBZ,EAAY,CAACR,SAAUmB,QA0BtBE,EAAS,WACIC,SAASC,cAAc,cAC/BC,eAAe,SAAU,UAInC,OACE,yBAAK9C,UAAU,iBACb,yBAAKA,UAAU,aACb,uBAAGA,UAAU,oBAAb,wBACA,kBAAC,EAAD,CACEH,cAjCc,SAAA+B,GACpBC,EAAWD,GACXK,EAASL,OAkCP,yBAAK5B,UAAU,8BACb,kBAAC,EAAD,CAAWsB,SAAUA,EACbJ,eAjCS,WAErB,GAAe,IAAXa,EAAc,OAAO,KAEzBC,EAAUD,EAAO,GAEjBE,EAASL,GAETe,KA0BYxB,gBAxBU,WAEtBa,EAAUD,EAAO,GACjBE,EAASL,GACTe,UC7BgBI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAAST,SAASU,eAAe,SD8H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpB,MAAK,SAAAqB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.b967e0df.chunk.js","sourcesContent":["import React, {useRef} from 'react'\r\n\r\nconst Buscador = (props) => {\r\n\r\n    let textInput = useRef()\r\n\r\n    const handler = e =>{\r\n        e.preventDefault() \r\n        props.datosBusqueda(textInput.current.value)\r\n    }\r\n\r\n    return(\r\n    <form onSubmit={handler}>\r\n        <div className=\"row\">\r\n            <div className=\"form-group col-md-8\">\r\n                <input ref={textInput} placeholder=\"Busca tu imagen..\" className=\"form-control form-control-lg\"/>\r\n            </div>\r\n            <div className=\"form-group col-md-4\">\r\n                <input type=\"submit\" className=\"btn btn-lg btn-danger btn-block\" value=\"Buscar\"/>\r\n            </div>\r\n        </div>\r\n    </form>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default Buscador","import React from 'react'\r\nimport './css/style.css'\r\nconst Imagen = (props) => {\r\n\r\n    const {largeImageURL, likes, previewURL, tags, views} = props.imagen\r\n\r\n  return(\r\n    <div className=\"col-12 col-sm-6 col-md-4 col-lg-3 mb-4\">\r\n        <div className=\"card\">\r\n            <img src={previewURL} alt={tags} className=\"card-img-top imgs\"/>\r\n            <div className=\"card-body\">\r\n                <p className=\"card-text\">\r\n                    {likes} me gusta\r\n                </p>\r\n                <p className=\"card-text\">\r\n                    {views} veces visto\r\n                </p>\r\n                <a href={largeImageURL} target=\"_blank\" rel=\"noopener noreferrer\" className=\"btn btn-primary btn-block\">\r\n                    Ver imagen\r\n                </a>\r\n            </div>\r\n        </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Imagen;","import React from 'react'\r\n\r\nconst Paginacion = (props) => {\r\n    return(\r\n        <div className=\"py-3\">\r\n        <button type=\"button\" className=\"btn btn-info mr-1\" onClick={props.paginaAnterior}>\r\n            Anterior &larr;\r\n        </button>\r\n        <button type=\"button\" className=\"btn btn-info mr-1\" onClick={props.paginaSiguiente}>\r\n            Siguiente &rarr;\r\n        </button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Paginacion;","import React from 'react'\r\nimport Imagen from './Imagen'\r\nimport Paginacion from './Paginacion'\r\nconst Resultado = (props) => {\r\n\r\n  const mostrarImagenes = () => {\r\n    const imagenes = props.imagenes\r\n    if(!imagenes) return null\r\n\r\n    return(\r\n        <React.Fragment>\r\n            <div className=\"col-12 p-5 row\">\r\n                {props.imagenes.imagenes.map(imagen=>\r\n                <Imagen imagen={imagen} key={imagen.id}/>)}\r\n            </div> \r\n            <Paginacion\r\n                paginaAnterior={props.paginaAnterior}\r\n                paginaSiguiente={props.paginaSiguiente}\r\n            />\r\n        </React.Fragment>\r\n    )\r\n  }\r\n\r\n\r\n  return(\r\n      <React.Fragment>\r\n          {mostrarImagenes()}\r\n      </React.Fragment>\r\n  )\r\n\r\n}\r\n\r\nexport default Resultado","import React, {useState} from 'react'; \nimport Buscador from './components/Buscador' \nimport Resultado from './components/Resultado'\n\nfunction App() {\n  //atributos(?)\n  // eslint-disable-next-line no-unused-vars\n  const [termino, setTermino] = useState()\n  const [imagenes, setImagenes] = useState()\n  const [pagina, setPagina] = useState(1)\n\n  //funciones\n  const fetchApi = (palabraBusqueda) => {\n    const url = `https://pixabay.com/api/?key=1732750-d45b5378879d1e877cd1d35a6&q=${palabraBusqueda}&per_page=16&page=${pagina}`\n    fetch(url).then(respuesta => respuesta.json())\n    .then(resultado => {\n      let res = resultado.hits\n      //console.log(res)\n      setImagenes({imagenes: res})\n    })\n  }\n\n  const datosBusqueda = termino => {\n    setTermino(termino)\n    fetchApi(termino)\n  }\n\n  const paginaAnterior = () => {\n\n    if (pagina === 1) return null\n\n    setPagina(pagina-1)\n\n    fetchApi(termino)\n\n    scroll()\n  }\n  const paginaSiguiente = () => {\n\n    setPagina(pagina+1)\n    fetchApi(termino)\n    scroll()\n  }\n  \n const scroll = () => {\n   const elemento = document.querySelector('.jumbotron')\n   elemento.scrollIntoView('smooth', 'start')\n }\n \n\n  return (\n    <div className=\"app container\">\n      <div className=\"jumbotron\">\n        <p className=\"lead text-center\">Buscador de imagenes</p>\n        <Buscador\n          datosBusqueda={datosBusqueda}\n        />\n      </div>\n      <div className=\"row justify-content-center\">\n        <Resultado imagenes={imagenes}\n                paginaAnterior={paginaAnterior}\n                paginaSiguiente={paginaSiguiente}\n        />\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}